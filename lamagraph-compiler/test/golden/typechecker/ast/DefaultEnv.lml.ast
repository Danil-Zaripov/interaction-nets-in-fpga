(Module
 #std, None: forall 'a. 'a option
 DefaultEnv, x: int -> int -> bool
 #std, >: int -> int -> bool
 #std, -: int -> int -> int
 #std, ~-: int -> int
 #std, <=: int -> int -> bool
 #std, /: int -> int -> int
 #std, ::: forall 'a. ('a * 'a list) -> 'a list
 #std, *: int -> int -> int
 DefaultEnv, y: int
 #std, +: int -> int -> int
 #std, Some: forall 'a. 'a -> 'a option
 #std, print_int: int -> ()
 #std, []: forall 'a. 'a list
 #std, >=: int -> int -> bool
 #std, true: bool
 #std, <: int -> int -> bool
 #std, false: bool
 (Just
 (L
  { :1:8-18 }
  ("DefaultEnv")))
 [ (L
    { :3:1-18 }
    (ValD
     (L
      { :3:5-18 }
      (NonRec
       [ (L
          { :3:5-18 }
          (Bind
           DefaultEnv, x: int -> int -> bool
           (L
            { :3:5-6 }
            (PatVar
             (DefaultEnv, x, int -> int -> bool)
             (L
              { :3:5-6 }
              "x")))
           (L
            { :3:7-18 }
            (ExprFunction
             int -> int -> bool
             (L
              { :3:7-8 }
              (PatVar
               (DefaultEnv, m, int)
               (L
                { :3:7-8 }
                "m")))
             (L
              { :3:9-18 }
              (ExprFunction
               int -> bool
               (L
                { :3:9-10 }
                (PatVar
                 (DefaultEnv, n, int)
                 (L
                  { :3:9-10 }
                  "n")))
               (L
                { :3:13-18 }
                (ExprApply
                 bool
                 (L
                  { :3:15-16 }
                  (ExprIdent
                   int -> int -> bool
                   "#std, >"))
                 [ (L
                    { :3:13-14 }
                    (ExprIdent
                     int
                     "DefaultEnv, m"))
                 , (L
                    { :3:17-18 }
                    (ExprIdent
                     int
                     "DefaultEnv, n")) ])))))))) ]))))
 , (L
    { :5:1-12 }
    (ValD
     (L
      { :5:5-12 }
      (NonRec
       [ (L
          { :5:5-12 }
          (Bind
           DefaultEnv, y: int
           (L
            { :5:5-6 }
            (PatVar
             (DefaultEnv, y, int)
             (L
              { :5:5-6 }
              "y")))
           (L
            { :5:9-12 }
            (ExprApply
             int
             (L
              { :5:10-11 }
              (ExprIdent
               int -> int -> int
               "#std, +"))
             [ (L
                { :5:9-10 }
                (ExprConstant int int
                 5))
             , (L
                { :5:11-12 }
                (ExprConstant int int
                 2)) ])))) ])))) ])