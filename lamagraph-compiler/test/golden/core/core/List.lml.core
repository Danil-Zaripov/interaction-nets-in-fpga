let List.|> = fun List.x -> fun List.f -> List.f List.x
let List.reverse = fun List.l -> let rec List.helper = fun List.l ->
                                                       fun List.acc ->
                                                       match List.l as t#a with ( #std.[]
                                                       , []
                                                       , List.acc )
                                                       | ( #std.::
                                                       , [List.hd, List.tl]
                                                       , (List.helper List.tl) (#std.:: ((List.hd),
                                                       (List.acc))) )
                   in (List.helper List.l) #std.[]
let List.head = fun List.l -> match List.l as t#b with ( #std.::
                              , [List.hd, List.tl]
                              , List.hd )
let List.l1 = #std.:: ((1), (#std.:: ((2), (#std.:: ((3), (#std.[]))))))
let List.t1 = #std.print_int (List.head (List.reverse List.l1))
let List.t2 = (List.|> ((List.|> (List.reverse List.l1)) List.head)) #std.print_int